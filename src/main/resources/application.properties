spring.application.name=kafka-example
#Tomcat server
server.port=8003
server.compression.enabled=true
server.error.whitelabel.enabled=false
server.tomcat.max-threads=200
#default 100 # Maximum queue length for incoming connection requests when all possible request processing threads are in use.
server.tomcat.accept-count=100
#default 10000 Maximum number of connections that the server accepts and processes at any given time.
server.tomcat.max-connections=10000
server.connection-timeout=40000ms


ms.kafka.enabled=true
#kafka messaging server
messaging.kafka.address=localhost:29092
messaging.kafka.producer.topic=MessagingQueue2

kafka.procedure.deduplication=true

messaging.consumer.pool.size=200
messaging.consumer.pool.thread.name.prefix=messaging-thread-pool-
messaging.kafka.chatprogram.consumer.topic=MessagingQueue2
messaging.kafka.chatprogram.consumer.groupid=MessagingQueue2_groupid
messaging.kafka.chatprogram.consumer.concurrent.thread=3
messaging.kafka.chatprogram.consumer.batch=true
messaging.kafka.chatprogram.consumer.number.of.message.in.batch=1

messaging.kafka.eventsourcing.consumer.topic=EventSourcingTopic
messaging.kafka.eventsourcing.consumer.groupid=EventSourcingTopic2_groupid
messaging.kafka.eventsourcing.consumer.concurrent.thread=50
messaging.kafka.eventsourcing.consumer.batch=true
messaging.kafka.eventsourcing.consumer.number.of.message.in.batch=1000

#GracefulShutdown
graceful.shutdown.dns.timeout=10000
graceful.shutdown.rest.controller.wait.time.max=300
graceful.shutdown.schedule.task.wait.time.max=300
graceful.shutdown.messaging.consumer.wait.time.max=300
graceful.shutdown.rabbit.consumer.wait.time.max=300